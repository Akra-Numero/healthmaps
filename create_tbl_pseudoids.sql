-- File: _create_tbl_dt_pseudoids.sql
-- Date: 2021.02.10
-- Bijoy Joseph
-- SQL execute file to create pseudo ID table structure in PostgreSQL mgdb::stat

-- Schema: "stat"
-- =====================================================================
-- Set the default search path to stat, and then mgdb after.
  SET search_path TO stat, mgdb;
-- =====================================================================

-- 1) comment_dom
  DROP DOMAIN IF EXISTS comment_dom CASCADE;
  CREATE DOMAIN comment_dom AS character varying(200);
  ALTER DOMAIN comment_dom OWNER TO morgam_dba;

  DROP DOMAIN IF EXISTS key1_dom CASCADE;
  CREATE DOMAIN key1_dom AS character varying(12);
  ALTER DOMAIN key1_dom OWNER TO morgam_dba;

-- =====================================================================
-- 1) trigger function add2log() (generic, for all tables)
-- =====================================================================
  CREATE OR REPLACE FUNCTION add2log() RETURNS TRIGGER AS $log_audit$
    BEGIN
        -- Add a row in logtable to indicate the action performed - use the special variable TG_OP
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO stat.logtable(comments,schemaname,tblname,trig_type,updated,userid) SELECT 'DEL', TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_WHEN, localtimestamp(0), user;
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO stat.logtable(comments,schemaname,tblname,trig_type,updated,userid) SELECT 'UPD', TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_WHEN, localtimestamp(0), user;
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO stat.logtable(comments,schemaname,tblname,trig_type,updated,userid) SELECT 'INS', TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_WHEN, localtimestamp(0), user;
            RETURN NEW;
        END IF;
        RETURN NEW; -- result is ignored since this is an AFTER trigger
    END;
  $log_audit$ LANGUAGE plpgsql;

  ALTER FUNCTION add2log() OWNER TO morgam_dba;

-- =====================================================================
-- 2) log_pseudoids() - after trigger function for table manifest 
-- =====================================================================
  CREATE OR REPLACE FUNCTION log_dt_pseudoids() RETURNS trigger AS $logpseudoid$
    BEGIN
-- Insert a line to the logtable
      INSERT INTO stat.logtable(comments,tblname,trig_type,updated,userid) SELECT (select count(*) from stat.dt_pseudoids where log_id is NULL) || ' inserted', 'dt_pseudoids', 'AFTER', localtimestamp(0), user;

-- Update the table with the log_id generated by above line
      UPDATE stat.dt_pseudoids SET log_id = (select coalesce(max(log_id), 0) from stat.logtable where tblname='dt_pseudoids' and trig_type='AFTER') WHERE log_id IS NULL;
      RETURN NULL;
    END;
  $logpseudoid$ LANGUAGE 'plpgsql' VOLATILE COST 100;
  ALTER FUNCTION log_dt_pseudoids() OWNER TO morgam_dba;


-- Create table logtable
-- =====================================================================
  DROP table IF EXISTS logtable CASCADE;
  CREATE table logtable (
    log_id      serial PRIMARY KEY
    ,comments   comment_dom NOT NULL
    ,schemaname varchar(20)
    ,tblname    varchar(40)           -- Name of table where the operation took place
    ,trig_type  varchar(6)            -- BEFORE or AFTER trigger
    ,status     integer default 0
    ,updated    timestamp default localtimestamp(0)
    ,userid     varchar(4)
  ) WITH (fillfactor=70);
  ALTER TABLE logtable OWNER TO morgam_dba;
-- =====================================================================

  COMMENT ON TABLE logtable IS 'Log table for all inserts, updates and deletes to the schema';
  COMMENT ON COLUMN logtable.log_id IS 'Primary Key';
  COMMENT ON COLUMN logtable.comments IS 'Information on updates/inserts/deletes';
  COMMENT ON COLUMN logtable.schemaname IS 'Name of schema';
  COMMENT ON COLUMN logtable.tblname IS 'Name of table where the operation took place';
  COMMENT ON COLUMN logtable.trig_type IS 'BEFORE or AFTER trigger';
  COMMENT ON COLUMN logtable.updated IS 'Timestamp without time zone';
  COMMENT ON COLUMN logtable.userid IS 'username from system';

-- Create an index
  DROP INDEX IF EXISTS idx_logtable_log_id CASCADE;
  CREATE INDEX idx_logtable_log_id ON stat.logtable(log_id);


-- Create table dt_pseudoids
-- =====================================================================
  DROP table IF EXISTS dt_pseudoids CASCADE;
  CREATE TABLE dt_pseudoids (
    ps_id      serial PRIMARY KEY
    ,transfer_id       INTEGER NOT NULL
    ,proposal_id       INTEGER NOT NULL
    ,key1_orig      key1_dom NOT NULL
    ,serial_new     varchar(6) NOT NULL
    ,key1_new       key1_dom NOT NULL
    ,log_id         integer -- REFERENCES logtable(log_id) ON update CASCADE
  );
  ALTER TABLE dt_pseudoids OWNER TO morgam_user;
-- =====================================================================

  COMMENT on table dt_pseudoids is 'Pseudo IDs created for pseudonymisation of data for transfer to analysis groups';
  COMMENT ON COLUMN dt_pseudoids.ps_id IS 'Serial number';
  COMMENT ON COLUMN dt_pseudoids.transfer_id IS 'Transfer number from publication management system';
  COMMENT ON COLUMN dt_pseudoids.proposal_id IS 'Publication proposal number from MORGAM PMS';
  COMMENT ON COLUMN dt_pseudoids.key1_orig IS 'Original MORGAM key1';
  COMMENT ON COLUMN dt_pseudoids.serial_new IS 'Pseudonymised serial';
  COMMENT ON COLUMN dt_pseudoids.key1_new IS 'Pseudonymised Key1';
  COMMENT ON COLUMN dt_pseudoids.log_id IS 'Link to log table';

-- Create indices
  DROP INDEX IF EXISTS psidx_key1 CASCADE;
  CREATE INDEX psidx_key1 ON dt_pseudoids(key1_orig);

-- trigger 1, general entry in logtable
  DROP TRIGGER IF EXISTS trig_dt_pseudoids_audit on dt_pseudoids CASCADE;
  CREATE TRIGGER trig_dt_pseudoids_audit
    BEFORE INSERT OR UPDATE OR DELETE ON dt_pseudoids
    FOR EACH STATEMENT
      EXECUTE PROCEDURE add2log();

-- trigger 2, insert number of rows entered
  DROP TRIGGER IF EXISTS trig_dt_pseudoids_insert on dt_pseudoids CASCADE;
  CREATE TRIGGER trig_dt_pseudoids_insert
    AFTER INSERT ON dt_pseudoids
    FOR EACH STATEMENT
      EXECUTE PROCEDURE log_dt_pseudoids();

